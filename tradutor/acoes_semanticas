@TIPO_DE_DADO -> int
regra = {'nome': 'TIPO_DE_DADO', 'tipo': 'int', 'tamanho': 4}

@TIPO_DE_DADO -> real
regra = {'nome': 'TIPO_DE_DADO', 'tipo': 'real', 'tamanho': 8}

@TIPO_DE_DADO -> caractere
regra = {'nome': 'TIPO_DE_DADO', 'tipo': 'caractere', 'tamanho': 1}

@TIPO_DE_DADO -> bool
regra = {'nome': 'TIPO_DE_DADO', 'tipo': 'bool', 'tamanho': 1}

@DECLARACAO_A -> ''
regra = {'nome': 'DECLARACAO_A', 'variaveis': []}

@DECLARACAO_A -> , variavel DECLARACAO_A
regra = {'nome': 'DECLARACAO_A', 'variaveis': topStack(1)['variaveis'] + [topStack(2)[1]]}

@DECLARACAO -> var TIPO_DE_DADO variavel DECLARACAO_A
regra = {'nome': 'DECLARACAO', 'variaveis': topStack(1)['variaveis'] + [topStack(2)[1]]}
tipo_dado = topStack(3)['tipo']
tamanho_dado = topStack(3)['tamanho']
for variavel in reversed(regra['variaveis']):
	if existeVariavel(variavel):
		print('Erro semântico na linha %d: variável %s já declarada anteriormente' % (topStack(4)[2], variavel))
		exit()
	addVariavel(variavel, tipo_dado)
	codigo.append('alocar %d %s' % (tamanho_dado, variavel))

@EXPRESSAO_I -> variavel
if not existeVariavel(topStack(1)[1]):
	print('Erro semântico na linha %d: variável %s não foi declarada' % (topStack(1)[2], topStack(1)[1]))
	exit()
regra = {
	'nome': 'EXPRESSAO_I',
	'nome_variavel': topStack(1)[1],
	'codigo': [], 'valor': dicionarioVariaveis[topStack(1)[1]]['valor']
}

@ATRIBUICAO -> variavel ATRIBUIDOR ATRIBUICAO_A
if not existeVariavel(topStack(3)[1]):
	print('Erro semântico na linha %d: variável %s não foi declarada' % (topStack(3)[2], topStack(3)[1]))
	exit()
regra = topStack(1)
regra['nome'] = 'ATRIBUICAO'
codigo += regra['codigo']
if topStack(2)['tipo_atribuidor'] == '<-':
	codigo.append('%s = %s' % (topStack(3)[1], topStack(1)['nome_variavel']))
	valor = topStack(1)['valor']
	if dicionarioVariaveis[topStack(3)[1]]['tipo'] == 'int':
		valor = int(valor)
	elif dicionarioVariaveis[topStack(3)[1]]['tipo'] == 'real':
		valor = float(valor)
	dicionarioVariaveis[topStack(3)[1]]['valor'] = valor
else:
	print("Não fizemos isso ainda:")
	print(regra + " => " + GLC[productionNumber][1])
	exit()

@EXPRESSAO -> EXPRESSAO ou EXPRESSAO_A
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO -> EXPRESSAO_A
regra = topStack(1)
regra['nome'] = 'EXPRESSAO'

@EXPRESSAO_A -> EXPRESSAO_A e EXPRESSAO_B
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_A -> EXPRESSAO_B
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_A'

@EXPRESSAO_B -> EXPRESSAO_B xou EXPRESSAO_C
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_B -> EXPRESSAO_C
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_B'

@EXPRESSAO_C -> nao EXPRESSAO_C
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_C -> EXPRESSAO_D
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_C'

@EXPRESSAO_D -> EXPRESSAO_D COMPARADOR EXPRESSAO_E
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_D -> EXPRESSAO_E
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_D'

@COMPARADOR -> <=
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@COMPARADOR -> =
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@COMPARADOR -> >=
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@COMPARADOR -> <
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@COMPARADOR -> >
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@COMPARADOR -> <>
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_E -> EXPRESSAO_E OPERADORES_EXPRESSAO_E EXPRESSAO_F
operador = topStack(2)['operador']
nome_variavel = '$' + str(var_temp)
valor = eval(str(topStack(3)['valor']) + operador + str(topStack(1)['valor']))
regra = {
	'nome': 'EXPRESSAO_E',
	'nome_variavel': nome_variavel,
	'codigo': topStack(3)['codigo'] + topStack(1)['codigo'] + \
	['%s = %s %s %s' % (nome_variavel, topStack(3)['nome_variavel'], operador, topStack(1)['nome_variavel'])],
	'valor': valor
}
var_temp += 1

@EXPRESSAO_E -> EXPRESSAO_F
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_E'

@OPERADORES_EXPRESSAO_E -> +
regra = {'nome': 'OPERADORES_EXPRESSAO_E', 'operador': '+'}

@OPERADORES_EXPRESSAO_E -> -
regra = {'nome': 'OPERADORES_EXPRESSAO_E', 'operador': '-'}

@EXPRESSAO_F -> EXPRESSAO_F OPERADORES_EXPRESSAO_F EXPRESSAO_G
operador = topStack(2)['operador']
nome_variavel = '$' + str(var_temp)
valor = eval(str(topStack(3)['valor']) + operador + str(topStack(1)['valor']))
regra = {
	'nome': 'EXPRESSAO_F',
	'nome_variavel': nome_variavel,
	'codigo': topStack(3)['codigo'] + topStack(1)['codigo'] + \
	['%s = %s %s %s' % (nome_variavel, topStack(3)['nome_variavel'], operador, topStack(1)['nome_variavel'])],
	'valor': valor
}
var_temp += 1

@EXPRESSAO_F -> EXPRESSAO_G
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_F'

@OPERADORES_EXPRESSAO_F -> *
regra = {'nome': 'OPERADORES_EXPRESSAO_F', 'operador': '*'}

@OPERADORES_EXPRESSAO_F -> /
regra = {'nome': 'OPERADORES_EXPRESSAO_F', 'operador': '/'}

@OPERADORES_EXPRESSAO_F -> %
regra = {'nome': 'OPERADORES_EXPRESSAO_F', 'operador': '%'}

@OPERADORES_EXPRESSAO_F -> //
regra = {'nome': 'OPERADORES_EXPRESSAO_F', 'operador': '//'}

@EXPRESSAO_G -> OPERADORES_EXPRESSAO_G EXPRESSAO_G
operador = topStack(2)['operador']
nome_variavel = '$' + str(var_temp)
valor = eval(operador + str(topStack(1)['valor']))
regra = {
	'nome': 'EXPRESSAO_G',
	'nome_variavel': nome_variavel,
	'codigo': topStack(1)['codigo'] + ['%s = %s%s' % (nome_variavel, operador, topStack(1)['nome_variavel'])],
	'valor': valor
}
var_temp += 1

@EXPRESSAO_G -> EXPRESSAO_H
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_G'

@OPERADORES_EXPRESSAO_G -> +
regra = {'nome': 'OPERADORES_EXPRESSAO_G', 'operador': '+'}

@OPERADORES_EXPRESSAO_G -> -
regra = {'nome': 'OPERADORES_EXPRESSAO_G', 'operador': '-'}

@EXPRESSAO_H -> EXPRESSAO_H ^ EXPRESSAO_I
operador = '**'
nome_variavel = '$' + str(var_temp)
valor = eval('(' + str(topStack(3)['valor']) + ')' + operador + str(topStack(1)['valor']))
regra = {
	'nome': 'EXPRESSAO_H',
	'nome_variavel': nome_variavel,
	'codigo': topStack(3)['codigo'] + topStack(1)['codigo'] + \
	['%s = %s %s %s' % (nome_variavel, topStack(3)['nome_variavel'], '^', topStack(1)['nome_variavel'])],
	'valor': valor
}
var_temp += 1

@EXPRESSAO_H -> EXPRESSAO_I
regra = topStack(1)
regra['nome'] = 'EXPRESSAO_H'

@EXPRESSAO_I -> ( EXPRESSAO )
regra = topStack(2)
regra['nome'] = 'EXPRESSAO_I'

@EXPRESSAO_I -> numero
regra = {'nome': 'EXPRESSAO_I', 'nome_variavel': topStack(1)[1], 'codigo': [], 'valor': int(topStack(1)[1])}

@EXPRESSAO_I -> numero_real
regra = {'nome': 'EXPRESSAO_I', 'nome_variavel': topStack(1)[1], 'codigo': [], 'valor': float(topStack(1)[1])}

@EXPRESSAO_I -> char
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_I -> verdadeiro
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@EXPRESSAO_I -> falso
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@ATRIBUICAO_A -> ATRIBUICAO
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@ATRIBUICAO_A -> EXPRESSAO
regra = topStack(1)
regra['nome'] = 'ATRIBUICAO_A'

@ATRIBUIDOR -> <-
regra = {'nome': 'ATRIBUIDOR', 'tipo_atribuidor': '<-'}

@ATRIBUIDOR -> +<-
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@ATRIBUIDOR -> -<-
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@ATRIBUIDOR -> *<-
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()

@ATRIBUIDOR -> /<-
print("Não fizemos isso ainda:")
print(regra + " => " + GLC[productionNumber][1])
exit()
