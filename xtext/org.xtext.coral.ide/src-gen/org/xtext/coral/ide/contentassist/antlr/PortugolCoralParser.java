/*
 * generated by Xtext 2.16.0
 */
package org.xtext.coral.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.coral.ide.contentassist.antlr.internal.InternalPortugolCoralParser;
import org.xtext.coral.services.PortugolCoralGrammarAccess;

public class PortugolCoralParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PortugolCoralGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PortugolCoralGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAcoesAccess().getAlternatives(), "rule__Acoes__Alternatives");
			builder.put(grammarAccess.getDeclararVariaveisAccess().getAlternatives_0(), "rule__DeclararVariaveis__Alternatives_0");
			builder.put(grammarAccess.getTipoVariavelAccess().getAlternatives(), "rule__TipoVariavel__Alternatives");
			builder.put(grammarAccess.getNaoAccess().getNaosAlternatives_0_0(), "rule__Nao__NaosAlternatives_0_0");
			builder.put(grammarAccess.getComparacaoAccess().getComparacaoAlternatives_1_1_0(), "rule__Comparacao__ComparacaoAlternatives_1_1_0");
			builder.put(grammarAccess.getAdicaoOuSubtracaoAccess().getOperacaoAlternatives_1_1_0(), "rule__AdicaoOuSubtracao__OperacaoAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicacaoOuDivisaoAccess().getOperacaoAlternatives_1_1_0(), "rule__MultiplicacaoOuDivisao__OperacaoAlternatives_1_1_0");
			builder.put(grammarAccess.getSinalAccess().getSinaisAlternatives_0_0(), "rule__Sinal__SinaisAlternatives_0_0");
			builder.put(grammarAccess.getElementoAccess().getAlternatives(), "rule__Elemento__Alternatives");
			builder.put(grammarAccess.getElementoAtomicoAccess().getAlternatives(), "rule__ElementoAtomico__Alternatives");
			builder.put(grammarAccess.getElementoAtomicoAccess().getValorAlternatives_2_1_0(), "rule__ElementoAtomico__ValorAlternatives_2_1_0");
			builder.put(grammarAccess.getDeclararVariaveisAccess().getGroup(), "rule__DeclararVariaveis__Group__0");
			builder.put(grammarAccess.getDeclararVariaveisTipoAccess().getGroup(), "rule__DeclararVariaveisTipo__Group__0");
			builder.put(grammarAccess.getDeclararVariaveisTipoAccess().getGroup_1(), "rule__DeclararVariaveisTipo__Group_1__0");
			builder.put(grammarAccess.getAtribuirAccess().getGroup(), "rule__Atribuir__Group__0");
			builder.put(grammarAccess.getOuAccess().getGroup(), "rule__Ou__Group__0");
			builder.put(grammarAccess.getOuAccess().getGroup_1(), "rule__Ou__Group_1__0");
			builder.put(grammarAccess.getEAccess().getGroup(), "rule__E__Group__0");
			builder.put(grammarAccess.getEAccess().getGroup_1(), "rule__E__Group_1__0");
			builder.put(grammarAccess.getXouAccess().getGroup(), "rule__Xou__Group__0");
			builder.put(grammarAccess.getXouAccess().getGroup_1(), "rule__Xou__Group_1__0");
			builder.put(grammarAccess.getNaoAccess().getGroup(), "rule__Nao__Group__0");
			builder.put(grammarAccess.getComparacaoAccess().getGroup(), "rule__Comparacao__Group__0");
			builder.put(grammarAccess.getComparacaoAccess().getGroup_1(), "rule__Comparacao__Group_1__0");
			builder.put(grammarAccess.getAdicaoOuSubtracaoAccess().getGroup(), "rule__AdicaoOuSubtracao__Group__0");
			builder.put(grammarAccess.getAdicaoOuSubtracaoAccess().getGroup_1(), "rule__AdicaoOuSubtracao__Group_1__0");
			builder.put(grammarAccess.getMultiplicacaoOuDivisaoAccess().getGroup(), "rule__MultiplicacaoOuDivisao__Group__0");
			builder.put(grammarAccess.getMultiplicacaoOuDivisaoAccess().getGroup_1(), "rule__MultiplicacaoOuDivisao__Group_1__0");
			builder.put(grammarAccess.getSinalAccess().getGroup(), "rule__Sinal__Group__0");
			builder.put(grammarAccess.getExponenciacaoAccess().getGroup(), "rule__Exponenciacao__Group__0");
			builder.put(grammarAccess.getExponenciacaoAccess().getGroup_1(), "rule__Exponenciacao__Group_1__0");
			builder.put(grammarAccess.getParentesesAccess().getGroup(), "rule__Parenteses__Group__0");
			builder.put(grammarAccess.getMatrizAccess().getGroup(), "rule__Matriz__Group__0");
			builder.put(grammarAccess.getPosicaoMatrizAccess().getGroup(), "rule__PosicaoMatriz__Group__0");
			builder.put(grammarAccess.getElementoAtomicoAccess().getGroup_0(), "rule__ElementoAtomico__Group_0__0");
			builder.put(grammarAccess.getElementoAtomicoAccess().getGroup_1(), "rule__ElementoAtomico__Group_1__0");
			builder.put(grammarAccess.getElementoAtomicoAccess().getGroup_2(), "rule__ElementoAtomico__Group_2__0");
			builder.put(grammarAccess.getElementoAtomicoAccess().getGroup_3(), "rule__ElementoAtomico__Group_3__0");
			builder.put(grammarAccess.getPortugolcoralAccess().getElementosAssignment(), "rule__Portugolcoral__ElementosAssignment");
			builder.put(grammarAccess.getDeclararVariaveisAccess().getElementosAssignment_2(), "rule__DeclararVariaveis__ElementosAssignment_2");
			builder.put(grammarAccess.getDeclararVariaveisTipoAccess().getElementosAssignment_0(), "rule__DeclararVariaveisTipo__ElementosAssignment_0");
			builder.put(grammarAccess.getDeclararVariaveisTipoAccess().getElementosAssignment_1_1(), "rule__DeclararVariaveisTipo__ElementosAssignment_1_1");
			builder.put(grammarAccess.getDeclararVariaveisTipoAccess().getTipoAssignment_3(), "rule__DeclararVariaveisTipo__TipoAssignment_3");
			builder.put(grammarAccess.getAtribuirAccess().getVariavelAssignment_1(), "rule__Atribuir__VariavelAssignment_1");
			builder.put(grammarAccess.getAtribuirAccess().getValorAssignment_3(), "rule__Atribuir__ValorAssignment_3");
			builder.put(grammarAccess.getExpressaoAccess().getEsquerdaAssignment(), "rule__Expressao__EsquerdaAssignment");
			builder.put(grammarAccess.getOuAccess().getDireitaAssignment_1_2(), "rule__Ou__DireitaAssignment_1_2");
			builder.put(grammarAccess.getEAccess().getDireitaAssignment_1_2(), "rule__E__DireitaAssignment_1_2");
			builder.put(grammarAccess.getXouAccess().getDireitaAssignment_1_2(), "rule__Xou__DireitaAssignment_1_2");
			builder.put(grammarAccess.getNaoAccess().getNaosAssignment_0(), "rule__Nao__NaosAssignment_0");
			builder.put(grammarAccess.getNaoAccess().getDireitaAssignment_1(), "rule__Nao__DireitaAssignment_1");
			builder.put(grammarAccess.getComparacaoAccess().getComparacaoAssignment_1_1(), "rule__Comparacao__ComparacaoAssignment_1_1");
			builder.put(grammarAccess.getComparacaoAccess().getDireitaAssignment_1_2(), "rule__Comparacao__DireitaAssignment_1_2");
			builder.put(grammarAccess.getAdicaoOuSubtracaoAccess().getOperacaoAssignment_1_1(), "rule__AdicaoOuSubtracao__OperacaoAssignment_1_1");
			builder.put(grammarAccess.getAdicaoOuSubtracaoAccess().getDireitaAssignment_1_2(), "rule__AdicaoOuSubtracao__DireitaAssignment_1_2");
			builder.put(grammarAccess.getMultiplicacaoOuDivisaoAccess().getOperacaoAssignment_1_1(), "rule__MultiplicacaoOuDivisao__OperacaoAssignment_1_1");
			builder.put(grammarAccess.getMultiplicacaoOuDivisaoAccess().getDireitaAssignment_1_2(), "rule__MultiplicacaoOuDivisao__DireitaAssignment_1_2");
			builder.put(grammarAccess.getSinalAccess().getSinaisAssignment_0(), "rule__Sinal__SinaisAssignment_0");
			builder.put(grammarAccess.getSinalAccess().getDireitaAssignment_1(), "rule__Sinal__DireitaAssignment_1");
			builder.put(grammarAccess.getExponenciacaoAccess().getDireitaAssignment_1_2(), "rule__Exponenciacao__DireitaAssignment_1_2");
			builder.put(grammarAccess.getElementoParentesesAccess().getDireitaAssignment(), "rule__ElementoParenteses__DireitaAssignment");
			builder.put(grammarAccess.getParentesesAccess().getDireitaAssignment_1(), "rule__Parenteses__DireitaAssignment_1");
			builder.put(grammarAccess.getMatrizAccess().getVariavelAssignment_0(), "rule__Matriz__VariavelAssignment_0");
			builder.put(grammarAccess.getMatrizAccess().getDireitaAssignment_1(), "rule__Matriz__DireitaAssignment_1");
			builder.put(grammarAccess.getPosicaoMatrizAccess().getDireitaAssignment_1(), "rule__PosicaoMatriz__DireitaAssignment_1");
			builder.put(grammarAccess.getElementoAtomicoAccess().getValorAssignment_0_1(), "rule__ElementoAtomico__ValorAssignment_0_1");
			builder.put(grammarAccess.getElementoAtomicoAccess().getValorAssignment_1_1(), "rule__ElementoAtomico__ValorAssignment_1_1");
			builder.put(grammarAccess.getElementoAtomicoAccess().getValorAssignment_2_1(), "rule__ElementoAtomico__ValorAssignment_2_1");
			builder.put(grammarAccess.getElementoAtomicoAccess().getVariavelAssignment_3_1(), "rule__ElementoAtomico__VariavelAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PortugolCoralGrammarAccess grammarAccess;

	@Override
	protected InternalPortugolCoralParser createParser() {
		InternalPortugolCoralParser result = new InternalPortugolCoralParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PortugolCoralGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PortugolCoralGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
