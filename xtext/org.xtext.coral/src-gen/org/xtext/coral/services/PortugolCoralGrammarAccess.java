/*
 * generated by Xtext 2.16.0
 */
package org.xtext.coral.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PortugolCoralGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PortugolcoralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Portugolcoral");
		private final Assignment cElementosAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementosAcoesParserRuleCall_0 = (RuleCall)cElementosAssignment.eContents().get(0);
		
		//Portugolcoral:
		//	elementos+=Acoes*;
		@Override public ParserRule getRule() { return rule; }
		
		//elementos+=Acoes*
		public Assignment getElementosAssignment() { return cElementosAssignment; }
		
		//Acoes
		public RuleCall getElementosAcoesParserRuleCall_0() { return cElementosAcoesParserRuleCall_0; }
	}
	public class AcoesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Acoes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclararVariaveisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtribuirParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Acoes:
		//	DeclararVariaveis | Atribuir;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclararVariaveis | Atribuir
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclararVariaveis
		public RuleCall getDeclararVariaveisParserRuleCall_0() { return cDeclararVariaveisParserRuleCall_0; }
		
		//Atribuir
		public RuleCall getAtribuirParserRuleCall_1() { return cAtribuirParserRuleCall_1; }
	}
	public class DeclararVariaveisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.DeclararVariaveis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cVariaveisKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cVariVeisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementosDeclararVariaveisTipoParserRuleCall_2_0 = (RuleCall)cElementosAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeclararVariaveis:
		//	('variaveis' | 'variáveis') '{'
		//	elementos+=DeclararVariaveisTipo+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('variaveis' | 'variáveis') '{' elementos+=DeclararVariaveisTipo+ '}'
		public Group getGroup() { return cGroup; }
		
		//'variaveis' | 'variáveis'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'variaveis'
		public Keyword getVariaveisKeyword_0_0() { return cVariaveisKeyword_0_0; }
		
		//'variáveis'
		public Keyword getVariVeisKeyword_0_1() { return cVariVeisKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elementos+=DeclararVariaveisTipo+
		public Assignment getElementosAssignment_2() { return cElementosAssignment_2; }
		
		//DeclararVariaveisTipo
		public RuleCall getElementosDeclararVariaveisTipoParserRuleCall_2_0() { return cElementosDeclararVariaveisTipoParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DeclararVariaveisTipoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.DeclararVariaveisTipo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementosIDTerminalRuleCall_0_0 = (RuleCall)cElementosAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementosAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementosIDTerminalRuleCall_1_1_0 = (RuleCall)cElementosAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTipoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTipoTipoVariavelParserRuleCall_3_0 = (RuleCall)cTipoAssignment_3.eContents().get(0);
		
		//DeclararVariaveisTipo:
		//	elementos+=ID (',' elementos+=ID)* ':' tipo=TipoVariavel;
		@Override public ParserRule getRule() { return rule; }
		
		//elementos+=ID (',' elementos+=ID)* ':' tipo=TipoVariavel
		public Group getGroup() { return cGroup; }
		
		//elementos+=ID
		public Assignment getElementosAssignment_0() { return cElementosAssignment_0; }
		
		//ID
		public RuleCall getElementosIDTerminalRuleCall_0_0() { return cElementosIDTerminalRuleCall_0_0; }
		
		//(',' elementos+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elementos+=ID
		public Assignment getElementosAssignment_1_1() { return cElementosAssignment_1_1; }
		
		//ID
		public RuleCall getElementosIDTerminalRuleCall_1_1_0() { return cElementosIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//tipo=TipoVariavel
		public Assignment getTipoAssignment_3() { return cTipoAssignment_3; }
		
		//TipoVariavel
		public RuleCall getTipoTipoVariavelParserRuleCall_3_0() { return cTipoTipoVariavelParserRuleCall_3_0; }
	}
	public class TipoVariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.TipoVariavel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRealKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTextoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLogicoKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLGicoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TipoVariavel:
		//	'int' | 'real' | 'texto' | 'logico' | 'lógico';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'real' | 'texto' | 'logico' | 'lógico'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'real'
		public Keyword getRealKeyword_1() { return cRealKeyword_1; }
		
		//'texto'
		public Keyword getTextoKeyword_2() { return cTextoKeyword_2; }
		
		//'logico'
		public Keyword getLogicoKeyword_3() { return cLogicoKeyword_3; }
		
		//'lógico'
		public Keyword getLGicoKeyword_4() { return cLGicoKeyword_4; }
	}
	public class AtribuirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Atribuir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtribuirAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariavelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariavelIDTerminalRuleCall_1_0 = (RuleCall)cVariavelAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValorExpressaoParserRuleCall_3_0 = (RuleCall)cValorAssignment_3.eContents().get(0);
		
		//Atribuir:
		//	{Atribuir} variavel=ID '=' valor=Expressao;
		@Override public ParserRule getRule() { return rule; }
		
		//{Atribuir} variavel=ID '=' valor=Expressao
		public Group getGroup() { return cGroup; }
		
		//{Atribuir}
		public Action getAtribuirAction_0() { return cAtribuirAction_0; }
		
		//variavel=ID
		public Assignment getVariavelAssignment_1() { return cVariavelAssignment_1; }
		
		//ID
		public RuleCall getVariavelIDTerminalRuleCall_1_0() { return cVariavelIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//valor=Expressao
		public Assignment getValorAssignment_3() { return cValorAssignment_3; }
		
		//Expressao
		public RuleCall getValorExpressaoParserRuleCall_3_0() { return cValorExpressaoParserRuleCall_3_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Expressao");
		private final Assignment cEsquerdaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEsquerdaOuParserRuleCall_0 = (RuleCall)cEsquerdaAssignment.eContents().get(0);
		
		//Expressao:
		//	esquerda=Ou;
		@Override public ParserRule getRule() { return rule; }
		
		//esquerda=Ou
		public Assignment getEsquerdaAssignment() { return cEsquerdaAssignment; }
		
		//Ou
		public RuleCall getEsquerdaOuParserRuleCall_0() { return cEsquerdaOuParserRuleCall_0; }
	}
	public class OuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Ou");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOuEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOuKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaEParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//Ou Expressao:
		//	E ({Ou.esquerda=current} 'ou' direita=E)*;
		@Override public ParserRule getRule() { return rule; }
		
		//E ({Ou.esquerda=current} 'ou' direita=E)*
		public Group getGroup() { return cGroup; }
		
		//E
		public RuleCall getEParserRuleCall_0() { return cEParserRuleCall_0; }
		
		//({Ou.esquerda=current} 'ou' direita=E)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Ou.esquerda=current}
		public Action getOuEsquerdaAction_1_0() { return cOuEsquerdaAction_1_0; }
		
		//'ou'
		public Keyword getOuKeyword_1_1() { return cOuKeyword_1_1; }
		
		//direita=E
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//E
		public RuleCall getDireitaEParserRuleCall_1_2_0() { return cDireitaEParserRuleCall_1_2_0; }
	}
	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.E");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXouParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaXouParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//E Expressao:
		//	Xou ({E.esquerda=current} 'e' direita=Xou)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Xou ({E.esquerda=current} 'e' direita=Xou)*
		public Group getGroup() { return cGroup; }
		
		//Xou
		public RuleCall getXouParserRuleCall_0() { return cXouParserRuleCall_0; }
		
		//({E.esquerda=current} 'e' direita=Xou)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{E.esquerda=current}
		public Action getEEsquerdaAction_1_0() { return cEEsquerdaAction_1_0; }
		
		//'e'
		public Keyword getEKeyword_1_1() { return cEKeyword_1_1; }
		
		//direita=Xou
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//Xou
		public RuleCall getDireitaXouParserRuleCall_1_2_0() { return cDireitaXouParserRuleCall_1_2_0; }
	}
	public class XouElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Xou");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNaoParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXouEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXouKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaNaoParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//Xou Expressao:
		//	Nao ({Xou.esquerda=current} 'xou' direita=Nao)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Nao ({Xou.esquerda=current} 'xou' direita=Nao)*
		public Group getGroup() { return cGroup; }
		
		//Nao
		public RuleCall getNaoParserRuleCall_0() { return cNaoParserRuleCall_0; }
		
		//({Xou.esquerda=current} 'xou' direita=Nao)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Xou.esquerda=current}
		public Action getXouEsquerdaAction_1_0() { return cXouEsquerdaAction_1_0; }
		
		//'xou'
		public Keyword getXouKeyword_1_1() { return cXouKeyword_1_1; }
		
		//direita=Nao
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//Nao
		public RuleCall getDireitaNaoParserRuleCall_1_2_0() { return cDireitaNaoParserRuleCall_1_2_0; }
	}
	public class NaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Nao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNaosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNaosAlternatives_0_0 = (Alternatives)cNaosAssignment_0.eContents().get(0);
		private final Keyword cNaosNaoKeyword_0_0_0 = (Keyword)cNaosAlternatives_0_0.eContents().get(0);
		private final Keyword cNaosNOKeyword_0_0_1 = (Keyword)cNaosAlternatives_0_0.eContents().get(1);
		private final Assignment cDireitaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDireitaComparacaoParserRuleCall_1_0 = (RuleCall)cDireitaAssignment_1.eContents().get(0);
		
		//Nao:
		//	naos+=('nao' | 'não')* direita=Comparacao;
		@Override public ParserRule getRule() { return rule; }
		
		//naos+=('nao' | 'não')* direita=Comparacao
		public Group getGroup() { return cGroup; }
		
		//naos+=('nao' | 'não')*
		public Assignment getNaosAssignment_0() { return cNaosAssignment_0; }
		
		//('nao' | 'não')
		public Alternatives getNaosAlternatives_0_0() { return cNaosAlternatives_0_0; }
		
		//'nao'
		public Keyword getNaosNaoKeyword_0_0_0() { return cNaosNaoKeyword_0_0_0; }
		
		//'não'
		public Keyword getNaosNOKeyword_0_0_1() { return cNaosNOKeyword_0_0_1; }
		
		//direita=Comparacao
		public Assignment getDireitaAssignment_1() { return cDireitaAssignment_1; }
		
		//Comparacao
		public RuleCall getDireitaComparacaoParserRuleCall_1_0() { return cDireitaComparacaoParserRuleCall_1_0; }
	}
	public class ComparacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Comparacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdicaoOuSubtracaoParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparacaoEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cComparacaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cComparacaoAlternatives_1_1_0 = (Alternatives)cComparacaoAssignment_1_1.eContents().get(0);
		private final Keyword cComparacaoLessThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(0);
		private final Keyword cComparacaoEqualsSignEqualsSignKeyword_1_1_0_1 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(1);
		private final Keyword cComparacaoGreaterThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(2);
		private final Keyword cComparacaoLessThanSignKeyword_1_1_0_3 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(3);
		private final Keyword cComparacaoGreaterThanSignKeyword_1_1_0_4 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(4);
		private final Keyword cComparacaoExclamationMarkEqualsSignKeyword_1_1_0_5 = (Keyword)cComparacaoAlternatives_1_1_0.eContents().get(5);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaAdicaoOuSubtracaoParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//Comparacao Expressao:
		//	AdicaoOuSubtracao ({Comparacao.esquerda=current} comparacao=('<=' | '==' | '>=' | '<' | '>' | '!=')
		//	direita=AdicaoOuSubtracao)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdicaoOuSubtracao ({Comparacao.esquerda=current} comparacao=('<=' | '==' | '>=' | '<' | '>' | '!=')
		//direita=AdicaoOuSubtracao)*
		public Group getGroup() { return cGroup; }
		
		//AdicaoOuSubtracao
		public RuleCall getAdicaoOuSubtracaoParserRuleCall_0() { return cAdicaoOuSubtracaoParserRuleCall_0; }
		
		//({Comparacao.esquerda=current} comparacao=('<=' | '==' | '>=' | '<' | '>' | '!=') direita=AdicaoOuSubtracao)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparacao.esquerda=current}
		public Action getComparacaoEsquerdaAction_1_0() { return cComparacaoEsquerdaAction_1_0; }
		
		//comparacao=('<=' | '==' | '>=' | '<' | '>' | '!=')
		public Assignment getComparacaoAssignment_1_1() { return cComparacaoAssignment_1_1; }
		
		//('<=' | '==' | '>=' | '<' | '>' | '!=')
		public Alternatives getComparacaoAlternatives_1_1_0() { return cComparacaoAlternatives_1_1_0; }
		
		//'<='
		public Keyword getComparacaoLessThanSignEqualsSignKeyword_1_1_0_0() { return cComparacaoLessThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'=='
		public Keyword getComparacaoEqualsSignEqualsSignKeyword_1_1_0_1() { return cComparacaoEqualsSignEqualsSignKeyword_1_1_0_1; }
		
		//'>='
		public Keyword getComparacaoGreaterThanSignEqualsSignKeyword_1_1_0_2() { return cComparacaoGreaterThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getComparacaoLessThanSignKeyword_1_1_0_3() { return cComparacaoLessThanSignKeyword_1_1_0_3; }
		
		//'>'
		public Keyword getComparacaoGreaterThanSignKeyword_1_1_0_4() { return cComparacaoGreaterThanSignKeyword_1_1_0_4; }
		
		//'!='
		public Keyword getComparacaoExclamationMarkEqualsSignKeyword_1_1_0_5() { return cComparacaoExclamationMarkEqualsSignKeyword_1_1_0_5; }
		
		//direita=AdicaoOuSubtracao
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//AdicaoOuSubtracao
		public RuleCall getDireitaAdicaoOuSubtracaoParserRuleCall_1_2_0() { return cDireitaAdicaoOuSubtracaoParserRuleCall_1_2_0; }
	}
	public class AdicaoOuSubtracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.AdicaoOuSubtracao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacaoOuDivisaoParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdicaoOuSubtracaoEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperacaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperacaoAlternatives_1_1_0 = (Alternatives)cOperacaoAssignment_1_1.eContents().get(0);
		private final Keyword cOperacaoPlusSignKeyword_1_1_0_0 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperacaoHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(1);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaMultiplicacaoOuDivisaoParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//AdicaoOuSubtracao Expressao:
		//	MultiplicacaoOuDivisao ({AdicaoOuSubtracao.esquerda=current} operacao=('+' | '-') direita=MultiplicacaoOuDivisao)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicacaoOuDivisao ({AdicaoOuSubtracao.esquerda=current} operacao=('+' | '-') direita=MultiplicacaoOuDivisao)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicacaoOuDivisao
		public RuleCall getMultiplicacaoOuDivisaoParserRuleCall_0() { return cMultiplicacaoOuDivisaoParserRuleCall_0; }
		
		//({AdicaoOuSubtracao.esquerda=current} operacao=('+' | '-') direita=MultiplicacaoOuDivisao)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdicaoOuSubtracao.esquerda=current}
		public Action getAdicaoOuSubtracaoEsquerdaAction_1_0() { return cAdicaoOuSubtracaoEsquerdaAction_1_0; }
		
		//operacao=('+' | '-')
		public Assignment getOperacaoAssignment_1_1() { return cOperacaoAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperacaoAlternatives_1_1_0() { return cOperacaoAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperacaoPlusSignKeyword_1_1_0_0() { return cOperacaoPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperacaoHyphenMinusKeyword_1_1_0_1() { return cOperacaoHyphenMinusKeyword_1_1_0_1; }
		
		//direita=MultiplicacaoOuDivisao
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//MultiplicacaoOuDivisao
		public RuleCall getDireitaMultiplicacaoOuDivisaoParserRuleCall_1_2_0() { return cDireitaMultiplicacaoOuDivisaoParserRuleCall_1_2_0; }
	}
	public class MultiplicacaoOuDivisaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.MultiplicacaoOuDivisao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSinalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicacaoOuDivisaoEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperacaoAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperacaoAlternatives_1_1_0 = (Alternatives)cOperacaoAssignment_1_1.eContents().get(0);
		private final Keyword cOperacaoAsteriskKeyword_1_1_0_0 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperacaoSolidusKeyword_1_1_0_1 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperacaoSolidusSolidusKeyword_1_1_0_2 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperacaoPercentSignKeyword_1_1_0_3 = (Keyword)cOperacaoAlternatives_1_1_0.eContents().get(3);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaSinalParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//MultiplicacaoOuDivisao Expressao:
		//	Sinal ({MultiplicacaoOuDivisao.esquerda=current} operacao=('*' | '/' | '//' | '%') direita=Sinal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Sinal ({MultiplicacaoOuDivisao.esquerda=current} operacao=('*' | '/' | '//' | '%') direita=Sinal)*
		public Group getGroup() { return cGroup; }
		
		//Sinal
		public RuleCall getSinalParserRuleCall_0() { return cSinalParserRuleCall_0; }
		
		//({MultiplicacaoOuDivisao.esquerda=current} operacao=('*' | '/' | '//' | '%') direita=Sinal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicacaoOuDivisao.esquerda=current}
		public Action getMultiplicacaoOuDivisaoEsquerdaAction_1_0() { return cMultiplicacaoOuDivisaoEsquerdaAction_1_0; }
		
		//operacao=('*' | '/' | '//' | '%')
		public Assignment getOperacaoAssignment_1_1() { return cOperacaoAssignment_1_1; }
		
		//('*' | '/' | '//' | '%')
		public Alternatives getOperacaoAlternatives_1_1_0() { return cOperacaoAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperacaoAsteriskKeyword_1_1_0_0() { return cOperacaoAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperacaoSolidusKeyword_1_1_0_1() { return cOperacaoSolidusKeyword_1_1_0_1; }
		
		//'//'
		public Keyword getOperacaoSolidusSolidusKeyword_1_1_0_2() { return cOperacaoSolidusSolidusKeyword_1_1_0_2; }
		
		//'%'
		public Keyword getOperacaoPercentSignKeyword_1_1_0_3() { return cOperacaoPercentSignKeyword_1_1_0_3; }
		
		//direita=Sinal
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//Sinal
		public RuleCall getDireitaSinalParserRuleCall_1_2_0() { return cDireitaSinalParserRuleCall_1_2_0; }
	}
	public class SinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Sinal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSinaisAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSinaisAlternatives_0_0 = (Alternatives)cSinaisAssignment_0.eContents().get(0);
		private final Keyword cSinaisPlusSignKeyword_0_0_0 = (Keyword)cSinaisAlternatives_0_0.eContents().get(0);
		private final Keyword cSinaisHyphenMinusKeyword_0_0_1 = (Keyword)cSinaisAlternatives_0_0.eContents().get(1);
		private final Assignment cDireitaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDireitaExponenciacaoParserRuleCall_1_0 = (RuleCall)cDireitaAssignment_1.eContents().get(0);
		
		//Sinal:
		//	sinais+=('+' | '-')* direita=Exponenciacao;
		@Override public ParserRule getRule() { return rule; }
		
		//sinais+=('+' | '-')* direita=Exponenciacao
		public Group getGroup() { return cGroup; }
		
		//sinais+=('+' | '-')*
		public Assignment getSinaisAssignment_0() { return cSinaisAssignment_0; }
		
		//('+' | '-')
		public Alternatives getSinaisAlternatives_0_0() { return cSinaisAlternatives_0_0; }
		
		//'+'
		public Keyword getSinaisPlusSignKeyword_0_0_0() { return cSinaisPlusSignKeyword_0_0_0; }
		
		//'-'
		public Keyword getSinaisHyphenMinusKeyword_0_0_1() { return cSinaisHyphenMinusKeyword_0_0_1; }
		
		//direita=Exponenciacao
		public Assignment getDireitaAssignment_1() { return cDireitaAssignment_1; }
		
		//Exponenciacao
		public RuleCall getDireitaExponenciacaoParserRuleCall_1_0() { return cDireitaExponenciacaoParserRuleCall_1_0; }
	}
	public class ExponenciacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Exponenciacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cElementoParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponenciacaoEsquerdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDireitaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDireitaElementoParserRuleCall_1_2_0 = (RuleCall)cDireitaAssignment_1_2.eContents().get(0);
		
		//Exponenciacao Expressao:
		//	Elemento ({Exponenciacao.esquerda=current} '^' direita=Elemento)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Elemento ({Exponenciacao.esquerda=current} '^' direita=Elemento)*
		public Group getGroup() { return cGroup; }
		
		//Elemento
		public RuleCall getElementoParserRuleCall_0() { return cElementoParserRuleCall_0; }
		
		//({Exponenciacao.esquerda=current} '^' direita=Elemento)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exponenciacao.esquerda=current}
		public Action getExponenciacaoEsquerdaAction_1_0() { return cExponenciacaoEsquerdaAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//direita=Elemento
		public Assignment getDireitaAssignment_1_2() { return cDireitaAssignment_1_2; }
		
		//Elemento
		public RuleCall getDireitaElementoParserRuleCall_1_2_0() { return cDireitaElementoParserRuleCall_1_2_0; }
	}
	public class ElementoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Elemento");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementoParentesesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementoAtomicoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMatrizParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Elemento Expressao:
		//	ElementoParenteses | ElementoAtomico | Matriz;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementoParenteses | ElementoAtomico | Matriz
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementoParenteses
		public RuleCall getElementoParentesesParserRuleCall_0() { return cElementoParentesesParserRuleCall_0; }
		
		//ElementoAtomico
		public RuleCall getElementoAtomicoParserRuleCall_1() { return cElementoAtomicoParserRuleCall_1; }
		
		//Matriz
		public RuleCall getMatrizParserRuleCall_2() { return cMatrizParserRuleCall_2; }
	}
	public class ElementoParentesesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.ElementoParenteses");
		private final Assignment cDireitaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDireitaParentesesParserRuleCall_0 = (RuleCall)cDireitaAssignment.eContents().get(0);
		
		//ElementoParenteses:
		//	direita=Parenteses;
		@Override public ParserRule getRule() { return rule; }
		
		//direita=Parenteses
		public Assignment getDireitaAssignment() { return cDireitaAssignment; }
		
		//Parenteses
		public RuleCall getDireitaParentesesParserRuleCall_0() { return cDireitaParentesesParserRuleCall_0; }
	}
	public class ParentesesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Parenteses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDireitaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDireitaExpressaoParserRuleCall_1_0 = (RuleCall)cDireitaAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenteses:
		//	'(' direita=Expressao ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' direita=Expressao ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//direita=Expressao
		public Assignment getDireitaAssignment_1() { return cDireitaAssignment_1; }
		
		//Expressao
		public RuleCall getDireitaExpressaoParserRuleCall_1_0() { return cDireitaExpressaoParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.Matriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariavelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariavelIDTerminalRuleCall_0_0 = (RuleCall)cVariavelAssignment_0.eContents().get(0);
		private final Assignment cDireitaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDireitaPosicaoMatrizParserRuleCall_1_0 = (RuleCall)cDireitaAssignment_1.eContents().get(0);
		
		//Matriz:
		//	variavel=ID direita+=PosicaoMatriz+;
		@Override public ParserRule getRule() { return rule; }
		
		//variavel=ID direita+=PosicaoMatriz+
		public Group getGroup() { return cGroup; }
		
		//variavel=ID
		public Assignment getVariavelAssignment_0() { return cVariavelAssignment_0; }
		
		//ID
		public RuleCall getVariavelIDTerminalRuleCall_0_0() { return cVariavelIDTerminalRuleCall_0_0; }
		
		//direita+=PosicaoMatriz+
		public Assignment getDireitaAssignment_1() { return cDireitaAssignment_1; }
		
		//PosicaoMatriz
		public RuleCall getDireitaPosicaoMatrizParserRuleCall_1_0() { return cDireitaPosicaoMatrizParserRuleCall_1_0; }
	}
	public class PosicaoMatrizElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.PosicaoMatriz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDireitaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDireitaExpressaoParserRuleCall_1_0 = (RuleCall)cDireitaAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PosicaoMatriz:
		//	'[' direita=Expressao ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' direita=Expressao ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//direita=Expressao
		public Assignment getDireitaAssignment_1() { return cDireitaAssignment_1; }
		
		//Expressao
		public RuleCall getDireitaExpressaoParserRuleCall_1_0() { return cDireitaExpressaoParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ElementoAtomicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.ElementoAtomico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstanteInteiraAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValorINTTerminalRuleCall_0_1_0 = (RuleCall)cValorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConstanteRealAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValorREALTerminalRuleCall_1_1_0 = (RuleCall)cValorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstanteStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValorAlternatives_2_1_0 = (Alternatives)cValorAssignment_2_1.eContents().get(0);
		private final RuleCall cValorTEXTO_ASPAS_SIMPLESTerminalRuleCall_2_1_0_0 = (RuleCall)cValorAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValorTEXTO_ASPAS_DUPLASTerminalRuleCall_2_1_0_1 = (RuleCall)cValorAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReferenciaVariavelAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariavelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariavelIDTerminalRuleCall_3_1_0 = (RuleCall)cVariavelAssignment_3_1.eContents().get(0);
		
		//ElementoAtomico Expressao:
		//	{ConstanteInteira} valor=INT | {ConstanteReal} valor=REAL | {ConstanteString} valor=(TEXTO_ASPAS_SIMPLES |
		//	TEXTO_ASPAS_DUPLAS) | {ReferenciaVariavel} variavel=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstanteInteira} valor=INT | {ConstanteReal} valor=REAL | {ConstanteString} valor=(TEXTO_ASPAS_SIMPLES |
		//TEXTO_ASPAS_DUPLAS) | {ReferenciaVariavel} variavel=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConstanteInteira} valor=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConstanteInteira}
		public Action getConstanteInteiraAction_0_0() { return cConstanteInteiraAction_0_0; }
		
		//valor=INT
		public Assignment getValorAssignment_0_1() { return cValorAssignment_0_1; }
		
		//INT
		public RuleCall getValorINTTerminalRuleCall_0_1_0() { return cValorINTTerminalRuleCall_0_1_0; }
		
		//{ConstanteReal} valor=REAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConstanteReal}
		public Action getConstanteRealAction_1_0() { return cConstanteRealAction_1_0; }
		
		//valor=REAL
		public Assignment getValorAssignment_1_1() { return cValorAssignment_1_1; }
		
		//REAL
		public RuleCall getValorREALTerminalRuleCall_1_1_0() { return cValorREALTerminalRuleCall_1_1_0; }
		
		//{ConstanteString} valor=(TEXTO_ASPAS_SIMPLES | TEXTO_ASPAS_DUPLAS)
		public Group getGroup_2() { return cGroup_2; }
		
		//{ConstanteString}
		public Action getConstanteStringAction_2_0() { return cConstanteStringAction_2_0; }
		
		//valor=(TEXTO_ASPAS_SIMPLES | TEXTO_ASPAS_DUPLAS)
		public Assignment getValorAssignment_2_1() { return cValorAssignment_2_1; }
		
		//(TEXTO_ASPAS_SIMPLES | TEXTO_ASPAS_DUPLAS)
		public Alternatives getValorAlternatives_2_1_0() { return cValorAlternatives_2_1_0; }
		
		//TEXTO_ASPAS_SIMPLES
		public RuleCall getValorTEXTO_ASPAS_SIMPLESTerminalRuleCall_2_1_0_0() { return cValorTEXTO_ASPAS_SIMPLESTerminalRuleCall_2_1_0_0; }
		
		//TEXTO_ASPAS_DUPLAS
		public RuleCall getValorTEXTO_ASPAS_DUPLASTerminalRuleCall_2_1_0_1() { return cValorTEXTO_ASPAS_DUPLASTerminalRuleCall_2_1_0_1; }
		
		//{ReferenciaVariavel} variavel=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//{ReferenciaVariavel}
		public Action getReferenciaVariavelAction_3_0() { return cReferenciaVariavelAction_3_0; }
		
		//variavel=ID
		public Assignment getVariavelAssignment_3_1() { return cVariavelAssignment_3_1; }
		
		//ID
		public RuleCall getVariavelIDTerminalRuleCall_3_1_0() { return cVariavelIDTerminalRuleCall_3_1_0; }
	}
	
	
	private final PortugolcoralElements pPortugolcoral;
	private final AcoesElements pAcoes;
	private final DeclararVariaveisElements pDeclararVariaveis;
	private final DeclararVariaveisTipoElements pDeclararVariaveisTipo;
	private final TipoVariavelElements pTipoVariavel;
	private final AtribuirElements pAtribuir;
	private final ExpressaoElements pExpressao;
	private final OuElements pOu;
	private final EElements pE;
	private final XouElements pXou;
	private final NaoElements pNao;
	private final ComparacaoElements pComparacao;
	private final AdicaoOuSubtracaoElements pAdicaoOuSubtracao;
	private final MultiplicacaoOuDivisaoElements pMultiplicacaoOuDivisao;
	private final SinalElements pSinal;
	private final ExponenciacaoElements pExponenciacao;
	private final ElementoElements pElemento;
	private final ElementoParentesesElements pElementoParenteses;
	private final ParentesesElements pParenteses;
	private final MatrizElements pMatriz;
	private final PosicaoMatrizElements pPosicaoMatriz;
	private final ElementoAtomicoElements pElementoAtomico;
	private final TerminalRule tREAL;
	private final TerminalRule tTEXTO_ASPAS_SIMPLES;
	private final TerminalRule tTEXTO_ASPAS_DUPLAS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PortugolCoralGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPortugolcoral = new PortugolcoralElements();
		this.pAcoes = new AcoesElements();
		this.pDeclararVariaveis = new DeclararVariaveisElements();
		this.pDeclararVariaveisTipo = new DeclararVariaveisTipoElements();
		this.pTipoVariavel = new TipoVariavelElements();
		this.pAtribuir = new AtribuirElements();
		this.pExpressao = new ExpressaoElements();
		this.pOu = new OuElements();
		this.pE = new EElements();
		this.pXou = new XouElements();
		this.pNao = new NaoElements();
		this.pComparacao = new ComparacaoElements();
		this.pAdicaoOuSubtracao = new AdicaoOuSubtracaoElements();
		this.pMultiplicacaoOuDivisao = new MultiplicacaoOuDivisaoElements();
		this.pSinal = new SinalElements();
		this.pExponenciacao = new ExponenciacaoElements();
		this.pElemento = new ElementoElements();
		this.pElementoParenteses = new ElementoParentesesElements();
		this.pParenteses = new ParentesesElements();
		this.pMatriz = new MatrizElements();
		this.pPosicaoMatriz = new PosicaoMatrizElements();
		this.pElementoAtomico = new ElementoAtomicoElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.REAL");
		this.tTEXTO_ASPAS_SIMPLES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.TEXTO_ASPAS_SIMPLES");
		this.tTEXTO_ASPAS_DUPLAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.coral.PortugolCoral.TEXTO_ASPAS_DUPLAS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.coral.PortugolCoral".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Portugolcoral:
	//	elementos+=Acoes*;
	public PortugolcoralElements getPortugolcoralAccess() {
		return pPortugolcoral;
	}
	
	public ParserRule getPortugolcoralRule() {
		return getPortugolcoralAccess().getRule();
	}
	
	//Acoes:
	//	DeclararVariaveis | Atribuir;
	public AcoesElements getAcoesAccess() {
		return pAcoes;
	}
	
	public ParserRule getAcoesRule() {
		return getAcoesAccess().getRule();
	}
	
	//DeclararVariaveis:
	//	('variaveis' | 'variáveis') '{'
	//	elementos+=DeclararVariaveisTipo+
	//	'}';
	public DeclararVariaveisElements getDeclararVariaveisAccess() {
		return pDeclararVariaveis;
	}
	
	public ParserRule getDeclararVariaveisRule() {
		return getDeclararVariaveisAccess().getRule();
	}
	
	//DeclararVariaveisTipo:
	//	elementos+=ID (',' elementos+=ID)* ':' tipo=TipoVariavel;
	public DeclararVariaveisTipoElements getDeclararVariaveisTipoAccess() {
		return pDeclararVariaveisTipo;
	}
	
	public ParserRule getDeclararVariaveisTipoRule() {
		return getDeclararVariaveisTipoAccess().getRule();
	}
	
	//TipoVariavel:
	//	'int' | 'real' | 'texto' | 'logico' | 'lógico';
	public TipoVariavelElements getTipoVariavelAccess() {
		return pTipoVariavel;
	}
	
	public ParserRule getTipoVariavelRule() {
		return getTipoVariavelAccess().getRule();
	}
	
	//Atribuir:
	//	{Atribuir} variavel=ID '=' valor=Expressao;
	public AtribuirElements getAtribuirAccess() {
		return pAtribuir;
	}
	
	public ParserRule getAtribuirRule() {
		return getAtribuirAccess().getRule();
	}
	
	//Expressao:
	//	esquerda=Ou;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//Ou Expressao:
	//	E ({Ou.esquerda=current} 'ou' direita=E)*;
	public OuElements getOuAccess() {
		return pOu;
	}
	
	public ParserRule getOuRule() {
		return getOuAccess().getRule();
	}
	
	//E Expressao:
	//	Xou ({E.esquerda=current} 'e' direita=Xou)*;
	public EElements getEAccess() {
		return pE;
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}
	
	//Xou Expressao:
	//	Nao ({Xou.esquerda=current} 'xou' direita=Nao)*;
	public XouElements getXouAccess() {
		return pXou;
	}
	
	public ParserRule getXouRule() {
		return getXouAccess().getRule();
	}
	
	//Nao:
	//	naos+=('nao' | 'não')* direita=Comparacao;
	public NaoElements getNaoAccess() {
		return pNao;
	}
	
	public ParserRule getNaoRule() {
		return getNaoAccess().getRule();
	}
	
	//Comparacao Expressao:
	//	AdicaoOuSubtracao ({Comparacao.esquerda=current} comparacao=('<=' | '==' | '>=' | '<' | '>' | '!=')
	//	direita=AdicaoOuSubtracao)*;
	public ComparacaoElements getComparacaoAccess() {
		return pComparacao;
	}
	
	public ParserRule getComparacaoRule() {
		return getComparacaoAccess().getRule();
	}
	
	//AdicaoOuSubtracao Expressao:
	//	MultiplicacaoOuDivisao ({AdicaoOuSubtracao.esquerda=current} operacao=('+' | '-') direita=MultiplicacaoOuDivisao)*;
	public AdicaoOuSubtracaoElements getAdicaoOuSubtracaoAccess() {
		return pAdicaoOuSubtracao;
	}
	
	public ParserRule getAdicaoOuSubtracaoRule() {
		return getAdicaoOuSubtracaoAccess().getRule();
	}
	
	//MultiplicacaoOuDivisao Expressao:
	//	Sinal ({MultiplicacaoOuDivisao.esquerda=current} operacao=('*' | '/' | '//' | '%') direita=Sinal)*;
	public MultiplicacaoOuDivisaoElements getMultiplicacaoOuDivisaoAccess() {
		return pMultiplicacaoOuDivisao;
	}
	
	public ParserRule getMultiplicacaoOuDivisaoRule() {
		return getMultiplicacaoOuDivisaoAccess().getRule();
	}
	
	//Sinal:
	//	sinais+=('+' | '-')* direita=Exponenciacao;
	public SinalElements getSinalAccess() {
		return pSinal;
	}
	
	public ParserRule getSinalRule() {
		return getSinalAccess().getRule();
	}
	
	//Exponenciacao Expressao:
	//	Elemento ({Exponenciacao.esquerda=current} '^' direita=Elemento)*;
	public ExponenciacaoElements getExponenciacaoAccess() {
		return pExponenciacao;
	}
	
	public ParserRule getExponenciacaoRule() {
		return getExponenciacaoAccess().getRule();
	}
	
	//Elemento Expressao:
	//	ElementoParenteses | ElementoAtomico | Matriz;
	public ElementoElements getElementoAccess() {
		return pElemento;
	}
	
	public ParserRule getElementoRule() {
		return getElementoAccess().getRule();
	}
	
	//ElementoParenteses:
	//	direita=Parenteses;
	public ElementoParentesesElements getElementoParentesesAccess() {
		return pElementoParenteses;
	}
	
	public ParserRule getElementoParentesesRule() {
		return getElementoParentesesAccess().getRule();
	}
	
	//Parenteses:
	//	'(' direita=Expressao ')';
	public ParentesesElements getParentesesAccess() {
		return pParenteses;
	}
	
	public ParserRule getParentesesRule() {
		return getParentesesAccess().getRule();
	}
	
	//Matriz:
	//	variavel=ID direita+=PosicaoMatriz+;
	public MatrizElements getMatrizAccess() {
		return pMatriz;
	}
	
	public ParserRule getMatrizRule() {
		return getMatrizAccess().getRule();
	}
	
	//PosicaoMatriz:
	//	'[' direita=Expressao ']';
	public PosicaoMatrizElements getPosicaoMatrizAccess() {
		return pPosicaoMatriz;
	}
	
	public ParserRule getPosicaoMatrizRule() {
		return getPosicaoMatrizAccess().getRule();
	}
	
	//ElementoAtomico Expressao:
	//	{ConstanteInteira} valor=INT | {ConstanteReal} valor=REAL | {ConstanteString} valor=(TEXTO_ASPAS_SIMPLES |
	//	TEXTO_ASPAS_DUPLAS) | {ReferenciaVariavel} variavel=ID;
	public ElementoAtomicoElements getElementoAtomicoAccess() {
		return pElementoAtomico;
	}
	
	public ParserRule getElementoAtomicoRule() {
		return getElementoAtomicoAccess().getRule();
	}
	
	//terminal REAL:
	//	INT '.' INT? | '.' INT;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal TEXTO_ASPAS_SIMPLES:
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getTEXTO_ASPAS_SIMPLESRule() {
		return tTEXTO_ASPAS_SIMPLES;
	}
	
	//terminal TEXTO_ASPAS_DUPLAS:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getTEXTO_ASPAS_DUPLASRule() {
		return tTEXTO_ASPAS_DUPLAS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
