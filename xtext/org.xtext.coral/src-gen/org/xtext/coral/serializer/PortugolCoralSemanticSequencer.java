/*
 * generated by Xtext 2.16.0
 */
package org.xtext.coral.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.coral.portugolcoral.AdicaoOuSubtracao;
import org.xtext.coral.portugolcoral.Atribuir;
import org.xtext.coral.portugolcoral.Comparacao;
import org.xtext.coral.portugolcoral.ConstanteInteira;
import org.xtext.coral.portugolcoral.ConstanteReal;
import org.xtext.coral.portugolcoral.ConstanteString;
import org.xtext.coral.portugolcoral.DeclararVariaveis;
import org.xtext.coral.portugolcoral.DeclararVariaveisTipo;
import org.xtext.coral.portugolcoral.E;
import org.xtext.coral.portugolcoral.ElementoParenteses;
import org.xtext.coral.portugolcoral.Exponenciacao;
import org.xtext.coral.portugolcoral.Expressao;
import org.xtext.coral.portugolcoral.Matriz;
import org.xtext.coral.portugolcoral.MultiplicacaoOuDivisao;
import org.xtext.coral.portugolcoral.Nao;
import org.xtext.coral.portugolcoral.Ou;
import org.xtext.coral.portugolcoral.Parenteses;
import org.xtext.coral.portugolcoral.Portugolcoral;
import org.xtext.coral.portugolcoral.PortugolcoralPackage;
import org.xtext.coral.portugolcoral.PosicaoMatriz;
import org.xtext.coral.portugolcoral.ReferenciaVariavel;
import org.xtext.coral.portugolcoral.Sinal;
import org.xtext.coral.portugolcoral.Xou;
import org.xtext.coral.services.PortugolCoralGrammarAccess;

@SuppressWarnings("all")
public class PortugolCoralSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PortugolCoralGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PortugolcoralPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PortugolcoralPackage.ADICAO_OU_SUBTRACAO:
				sequence_AdicaoOuSubtracao(context, (AdicaoOuSubtracao) semanticObject); 
				return; 
			case PortugolcoralPackage.ATRIBUIR:
				sequence_Atribuir(context, (Atribuir) semanticObject); 
				return; 
			case PortugolcoralPackage.COMPARACAO:
				sequence_Comparacao(context, (Comparacao) semanticObject); 
				return; 
			case PortugolcoralPackage.CONSTANTE_INTEIRA:
				sequence_ElementoAtomico(context, (ConstanteInteira) semanticObject); 
				return; 
			case PortugolcoralPackage.CONSTANTE_REAL:
				sequence_ElementoAtomico(context, (ConstanteReal) semanticObject); 
				return; 
			case PortugolcoralPackage.CONSTANTE_STRING:
				sequence_ElementoAtomico(context, (ConstanteString) semanticObject); 
				return; 
			case PortugolcoralPackage.DECLARAR_VARIAVEIS:
				sequence_DeclararVariaveis(context, (DeclararVariaveis) semanticObject); 
				return; 
			case PortugolcoralPackage.DECLARAR_VARIAVEIS_TIPO:
				sequence_DeclararVariaveisTipo(context, (DeclararVariaveisTipo) semanticObject); 
				return; 
			case PortugolcoralPackage.E:
				sequence_E(context, (E) semanticObject); 
				return; 
			case PortugolcoralPackage.ELEMENTO_PARENTESES:
				sequence_ElementoParenteses(context, (ElementoParenteses) semanticObject); 
				return; 
			case PortugolcoralPackage.EXPONENCIACAO:
				sequence_Exponenciacao(context, (Exponenciacao) semanticObject); 
				return; 
			case PortugolcoralPackage.EXPRESSAO:
				sequence_Expressao(context, (Expressao) semanticObject); 
				return; 
			case PortugolcoralPackage.MATRIZ:
				sequence_Matriz(context, (Matriz) semanticObject); 
				return; 
			case PortugolcoralPackage.MULTIPLICACAO_OU_DIVISAO:
				sequence_MultiplicacaoOuDivisao(context, (MultiplicacaoOuDivisao) semanticObject); 
				return; 
			case PortugolcoralPackage.NAO:
				sequence_Nao(context, (Nao) semanticObject); 
				return; 
			case PortugolcoralPackage.OU:
				sequence_Ou(context, (Ou) semanticObject); 
				return; 
			case PortugolcoralPackage.PARENTESES:
				sequence_Parenteses(context, (Parenteses) semanticObject); 
				return; 
			case PortugolcoralPackage.PORTUGOLCORAL:
				sequence_Portugolcoral(context, (Portugolcoral) semanticObject); 
				return; 
			case PortugolcoralPackage.POSICAO_MATRIZ:
				sequence_PosicaoMatriz(context, (PosicaoMatriz) semanticObject); 
				return; 
			case PortugolcoralPackage.REFERENCIA_VARIAVEL:
				sequence_ElementoAtomico(context, (ReferenciaVariavel) semanticObject); 
				return; 
			case PortugolcoralPackage.SINAL:
				sequence_Sinal(context, (Sinal) semanticObject); 
				return; 
			case PortugolcoralPackage.XOU:
				sequence_Xou(context, (Xou) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Comparacao returns AdicaoOuSubtracao
	 *     Comparacao.Comparacao_1_0 returns AdicaoOuSubtracao
	 *     AdicaoOuSubtracao returns AdicaoOuSubtracao
	 *     AdicaoOuSubtracao.AdicaoOuSubtracao_1_0 returns AdicaoOuSubtracao
	 *
	 * Constraint:
	 *     (esquerda=AdicaoOuSubtracao_AdicaoOuSubtracao_1_0 (operacao='+' | operacao='-') direita=MultiplicacaoOuDivisao)
	 */
	protected void sequence_AdicaoOuSubtracao(ISerializationContext context, AdicaoOuSubtracao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Acoes returns Atribuir
	 *     Atribuir returns Atribuir
	 *
	 * Constraint:
	 *     (variavel=ID valor=Expressao)
	 */
	protected void sequence_Atribuir(ISerializationContext context, Atribuir semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.ATRIBUIR__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.ATRIBUIR__VARIAVEL));
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.ATRIBUIR__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.ATRIBUIR__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtribuirAccess().getVariavelIDTerminalRuleCall_2_0(), semanticObject.getVariavel());
		feeder.accept(grammarAccess.getAtribuirAccess().getValorExpressaoParserRuleCall_4_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Comparacao returns Comparacao
	 *     Comparacao.Comparacao_1_0 returns Comparacao
	 *
	 * Constraint:
	 *     (
	 *         esquerda=Comparacao_Comparacao_1_0 
	 *         (
	 *             comparacao='<=' | 
	 *             comparacao='==' | 
	 *             comparacao='>=' | 
	 *             comparacao='<' | 
	 *             comparacao='>' | 
	 *             comparacao='!='
	 *         ) 
	 *         direita=AdicaoOuSubtracao
	 *     )
	 */
	protected void sequence_Comparacao(ISerializationContext context, Comparacao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeclararVariaveisTipo returns DeclararVariaveisTipo
	 *
	 * Constraint:
	 *     (elementos+=ID elementos+=ID* tipo=TipoVariavel)
	 */
	protected void sequence_DeclararVariaveisTipo(ISerializationContext context, DeclararVariaveisTipo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Acoes returns DeclararVariaveis
	 *     DeclararVariaveis returns DeclararVariaveis
	 *
	 * Constraint:
	 *     elementos+=DeclararVariaveisTipo+
	 */
	protected void sequence_DeclararVariaveis(ISerializationContext context, DeclararVariaveis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ou returns E
	 *     Ou.Ou_1_0 returns E
	 *     E returns E
	 *     E.E_1_0 returns E
	 *
	 * Constraint:
	 *     (esquerda=E_E_1_0 direita=Xou)
	 */
	protected void sequence_E(ISerializationContext context, E semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA));
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.E__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.E__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEAccess().getEEsquerdaAction_1_0(), semanticObject.getEsquerda());
		feeder.accept(grammarAccess.getEAccess().getDireitaXouParserRuleCall_1_2_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns ConstanteInteira
	 *     Exponenciacao.Exponenciacao_1_0 returns ConstanteInteira
	 *     Elemento returns ConstanteInteira
	 *     ElementoAtomico returns ConstanteInteira
	 *
	 * Constraint:
	 *     valor=INT
	 */
	protected void sequence_ElementoAtomico(ISerializationContext context, ConstanteInteira semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_INTEIRA__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_INTEIRA__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementoAtomicoAccess().getValorINTTerminalRuleCall_0_1_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns ConstanteReal
	 *     Exponenciacao.Exponenciacao_1_0 returns ConstanteReal
	 *     Elemento returns ConstanteReal
	 *     ElementoAtomico returns ConstanteReal
	 *
	 * Constraint:
	 *     valor=REAL
	 */
	protected void sequence_ElementoAtomico(ISerializationContext context, ConstanteReal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_REAL__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_REAL__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementoAtomicoAccess().getValorREALTerminalRuleCall_1_1_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns ConstanteString
	 *     Exponenciacao.Exponenciacao_1_0 returns ConstanteString
	 *     Elemento returns ConstanteString
	 *     ElementoAtomico returns ConstanteString
	 *
	 * Constraint:
	 *     valor=TEXTO
	 */
	protected void sequence_ElementoAtomico(ISerializationContext context, ConstanteString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_STRING__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.CONSTANTE_STRING__VALOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementoAtomicoAccess().getValorTEXTOTerminalRuleCall_2_1_0(), semanticObject.getValor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns ReferenciaVariavel
	 *     Exponenciacao.Exponenciacao_1_0 returns ReferenciaVariavel
	 *     Elemento returns ReferenciaVariavel
	 *     ElementoAtomico returns ReferenciaVariavel
	 *
	 * Constraint:
	 *     variavel=ID
	 */
	protected void sequence_ElementoAtomico(ISerializationContext context, ReferenciaVariavel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.REFERENCIA_VARIAVEL__VARIAVEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.REFERENCIA_VARIAVEL__VARIAVEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementoAtomicoAccess().getVariavelIDTerminalRuleCall_3_1_0(), semanticObject.getVariavel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns ElementoParenteses
	 *     Exponenciacao.Exponenciacao_1_0 returns ElementoParenteses
	 *     Elemento returns ElementoParenteses
	 *     ElementoParenteses returns ElementoParenteses
	 *
	 * Constraint:
	 *     direita=Parenteses
	 */
	protected void sequence_ElementoParenteses(ISerializationContext context, ElementoParenteses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.ELEMENTO_PARENTESES__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.ELEMENTO_PARENTESES__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementoParentesesAccess().getDireitaParentesesParserRuleCall_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns Exponenciacao
	 *     Exponenciacao.Exponenciacao_1_0 returns Exponenciacao
	 *
	 * Constraint:
	 *     (esquerda=Exponenciacao_Exponenciacao_1_0 direita=Elemento)
	 */
	protected void sequence_Exponenciacao(ISerializationContext context, Exponenciacao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA));
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPONENCIACAO__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPONENCIACAO__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExponenciacaoAccess().getExponenciacaoEsquerdaAction_1_0(), semanticObject.getEsquerda());
		feeder.accept(grammarAccess.getExponenciacaoAccess().getDireitaElementoParserRuleCall_1_2_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expressao returns Expressao
	 *
	 * Constraint:
	 *     esquerda=Ou
	 */
	protected void sequence_Expressao(ISerializationContext context, Expressao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressaoAccess().getEsquerdaOuParserRuleCall_0(), semanticObject.getEsquerda());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Exponenciacao returns Matriz
	 *     Exponenciacao.Exponenciacao_1_0 returns Matriz
	 *     Elemento returns Matriz
	 *     Matriz returns Matriz
	 *
	 * Constraint:
	 *     (variavel=ID direita+=PosicaoMatriz+)
	 */
	protected void sequence_Matriz(ISerializationContext context, Matriz semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Comparacao returns MultiplicacaoOuDivisao
	 *     Comparacao.Comparacao_1_0 returns MultiplicacaoOuDivisao
	 *     AdicaoOuSubtracao returns MultiplicacaoOuDivisao
	 *     AdicaoOuSubtracao.AdicaoOuSubtracao_1_0 returns MultiplicacaoOuDivisao
	 *     MultiplicacaoOuDivisao returns MultiplicacaoOuDivisao
	 *     MultiplicacaoOuDivisao.MultiplicacaoOuDivisao_1_0 returns MultiplicacaoOuDivisao
	 *
	 * Constraint:
	 *     (esquerda=MultiplicacaoOuDivisao_MultiplicacaoOuDivisao_1_0 (operacao='*' | operacao='/' | operacao='//' | operacao='%') direita=Sinal)
	 */
	protected void sequence_MultiplicacaoOuDivisao(ISerializationContext context, MultiplicacaoOuDivisao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ou returns Nao
	 *     Ou.Ou_1_0 returns Nao
	 *     E returns Nao
	 *     E.E_1_0 returns Nao
	 *     Xou returns Nao
	 *     Xou.Xou_1_0 returns Nao
	 *     Nao returns Nao
	 *
	 * Constraint:
	 *     ((naos+='nao' | naos+='não')* direita=Comparacao)
	 */
	protected void sequence_Nao(ISerializationContext context, Nao semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ou returns Ou
	 *     Ou.Ou_1_0 returns Ou
	 *
	 * Constraint:
	 *     (esquerda=Ou_Ou_1_0 direita=E)
	 */
	protected void sequence_Ou(ISerializationContext context, Ou semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA));
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.OU__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.OU__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOuAccess().getOuEsquerdaAction_1_0(), semanticObject.getEsquerda());
		feeder.accept(grammarAccess.getOuAccess().getDireitaEParserRuleCall_1_2_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parenteses returns Parenteses
	 *
	 * Constraint:
	 *     direita=Expressao
	 */
	protected void sequence_Parenteses(ISerializationContext context, Parenteses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.PARENTESES__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.PARENTESES__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParentesesAccess().getDireitaExpressaoParserRuleCall_1_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Portugolcoral returns Portugolcoral
	 *
	 * Constraint:
	 *     elementos+=Acoes+
	 */
	protected void sequence_Portugolcoral(ISerializationContext context, Portugolcoral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PosicaoMatriz returns PosicaoMatriz
	 *
	 * Constraint:
	 *     direita=Expressao
	 */
	protected void sequence_PosicaoMatriz(ISerializationContext context, PosicaoMatriz semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.POSICAO_MATRIZ__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.POSICAO_MATRIZ__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPosicaoMatrizAccess().getDireitaExpressaoParserRuleCall_1_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Comparacao returns Sinal
	 *     Comparacao.Comparacao_1_0 returns Sinal
	 *     AdicaoOuSubtracao returns Sinal
	 *     AdicaoOuSubtracao.AdicaoOuSubtracao_1_0 returns Sinal
	 *     MultiplicacaoOuDivisao returns Sinal
	 *     MultiplicacaoOuDivisao.MultiplicacaoOuDivisao_1_0 returns Sinal
	 *     Sinal returns Sinal
	 *
	 * Constraint:
	 *     ((sinais+='+' | sinais+='-')* direita=Exponenciacao)
	 */
	protected void sequence_Sinal(ISerializationContext context, Sinal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ou returns Xou
	 *     Ou.Ou_1_0 returns Xou
	 *     E returns Xou
	 *     E.E_1_0 returns Xou
	 *     Xou returns Xou
	 *     Xou.Xou_1_0 returns Xou
	 *
	 * Constraint:
	 *     (esquerda=Xou_Xou_1_0 direita=Nao)
	 */
	protected void sequence_Xou(ISerializationContext context, Xou semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.EXPRESSAO__ESQUERDA));
			if (transientValues.isValueTransient(semanticObject, PortugolcoralPackage.Literals.XOU__DIREITA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PortugolcoralPackage.Literals.XOU__DIREITA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXouAccess().getXouEsquerdaAction_1_0(), semanticObject.getEsquerda());
		feeder.accept(grammarAccess.getXouAccess().getDireitaNaoParserRuleCall_1_2_0(), semanticObject.getDireita());
		feeder.finish();
	}
	
	
}
